
// -------------- SET DIAGONAL AND ANGLE -------------
// 
//  - width  = diag / sin(angle)
//  - height = diag / sin(90 - angle)

@property --corner-diag {
    syntax: "<length>";
    inherits: true;
    initial-value: 100px;
}

@property --corner-angle {
    syntax: "<angle>";
    inherits: true;
    initial-value: 30deg;
}

body {
    --paper-fold-corner-diag: 100px;
    --paper-fold-corner-diag-hover: 10px;
    --paper-fold-corner-angle: 30deg;
    --paper-fold-corner-angle-hover: 60deg;
}

.print {
    --paper-fold-corner-diag: 25px;
    --paper-fold-corner-angle: 70deg;
}

.is-mobile {
    --paper-fold-corner-diag: 25px;
    --paper-fold-corner-angle: 70deg;
}

.callout[data-callout="paper-fold"] {
    --corner-width: calc(var(--paper-fold-corner-diag) / sin(var(--paper-fold-corner-angle)));
    --corner-height: calc(var(--paper-fold-corner-diag) / sin(90deg - var(--paper-fold-corner-angle)));
    transition: --paper-fold-corner-diag 0.5s ease-in-out, --paper-fold-corner-angle 0.5s ease-in-out;
}

.callout[data-callout="paper-fold"]:hover {
    --paper-fold-corner-diag: var(--paper-fold-corner-diag-hover);
    --paper-fold-corner-angle: var(--paper-fold-corner-angle-hover);
}



// -------------- SET WIDTH AND HEIGHT (no unit) -------------
//
//  - diag  = width * height / hypot(width, height)
//  - angle = asin(diag / width)
/*
@property --corner-width-n {
    syntax: "<number>";
    inherits: true;
    initial-value: 70;
}

@property --corner-height-n {
    syntax: "<number>";
    inherits: true;
    initial-value: 700;
}
.callout[data-callout="paper-fold"] {
    --corner-width: calc(1px * var(--corner-width-n));
    --corner-height: calc(1px * var(--corner-height-n));
    --corner-diag: calc(1px * var(--corner-diag-n));
    --corner-diag-n: calc(var(--corner-width-n) * var(--corner-height-n) / hypot(var(--corner-width-n), var(--corner-height-n)));
    --corner-angle: calc(asin(var(--corner-diag-n) / var(--corner-width-n)));
    transition: --corner-width-n 0.5s ease-out, --corner-height-n 0.5s ease-out;
}
.callout[data-callout="paper-fold"]:hover {
    --corner-width-n: 80;
    --corner-height-n: 20;
}*/

.theme-light {
    --paper-fold-color: 255, 247, 64;
}
.theme-dark {
    --paper-fold-color: 255, 255, 153;
}

.callout[data-callout="paper-fold"] {
    --callout-color: var(--paper-fold-color);
    --metadata-property-radius: 0;
    --metadata-padding: 0 0 8px 0;

    --postit-color: hsl(from rgb(var(--callout-color)) h s l / 0.7);
    --postit-border-color: var(--text-faint);

    font-family: 'Walter Turncoat', 'Comic Sans MS', cursive;
    color: black;

    background: linear-gradient(
        calc(-1 * var(--paper-fold-corner-angle)),
        transparent calc(var(--paper-fold-corner-diag) + 1px),
        hsl(from var(--postit-color) h s calc(l * 1.1)) var(--paper-fold-corner-diag),
        var(--postit-color) calc(var(--paper-fold-corner-diag) * 1.5))
        no-repeat;
    clip-path: polygon(0 0, 100% 0, 100% calc(100% - var(--corner-height)), calc(100% - var(--corner-width)) 100%, 0 100%);
    overflow: hidden;
}


.callout[data-callout="paper-fold"] :is(.callout-title, svg) {
    color: inherit;
}

.callout[data-callout="paper-fold"]::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: 0;
    display: inline-block;
    border-bottom-left-radius: 5px;
    background-repeat: no-repeat;
    height: var(--corner-height);
    width: var(--corner-width);
    transform: matrix(cos(-2 * var(--paper-fold-corner-angle)), sin(-2 * var(--paper-fold-corner-angle)), sin(-2 * var(--paper-fold-corner-angle)), calc(-1 * cos(-2 * var(--paper-fold-corner-angle))), 0, 0);
    background: linear-gradient(
        calc(180deg - var(--paper-fold-corner-angle)),
        hsl(from var(--postit-color) h s calc(l * 0.9) / 1) var(--paper-fold-corner-diag),
        hsl(from var(--postit-color) h s calc(l * 1.1) / 1) calc(var(--paper-fold-corner-diag) + 0.3 * min(var(--corner-height), var(--corner-width))),
        hsl(from var(--postit-color) h s calc(l * 0.5) / 1));
    box-shadow: 0 0 calc(min(var(--corner-width), var(--corner-height)) / 5) calc(min(var(--corner-width), var(--corner-height)) / 25) hsl(from var(--postit-color) h 40% 10%);
}

.callout[data-callout="paper-fold"] .callout-title {
    background-color: hsl(from var(--postit-color) h calc(s * 0.97) calc(l * 0.99) / 0.3);
    text-align: center;
}